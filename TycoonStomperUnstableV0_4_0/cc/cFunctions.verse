using { /Verse.org/Random }
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /Verse.org/Native }
using {Purchaseables}
using {Runtimeinstantiables}
using {Stomper}

<#

░█████╗░██╗░░░██╗░██████╗████████╗░█████╗░███╗░░░███╗
██╔══██╗██║░░░██║██╔════╝╚══██╔══╝██╔══██╗████╗░████║
██║░░╚═╝██║░░░██║╚█████╗░░░░██║░░░██║░░██║██╔████╔██║
██║░░██╗██║░░░██║░╚═══██╗░░░██║░░░██║░░██║██║╚██╔╝██║
╚█████╔╝╚██████╔╝██████╔╝░░░██║░░░╚█████╔╝██║░╚═╝░██║
░╚════╝░░╚═════╝░╚═════╝░░░░╚═╝░░░░╚════╝░╚═╝░░░░░╚═╝

███████╗██╗░░░██╗███╗░░██╗░█████╗░████████╗██╗░█████╗░███╗░░██╗░██████╗░░░██╗░░░██╗███████╗██████╗░░██████╗███████╗
██╔════╝██║░░░██║████╗░██║██╔══██╗╚══██╔══╝██║██╔══██╗████╗░██║██╔════╝░░░██║░░░██║██╔════╝██╔══██╗██╔════╝██╔════╝
█████╗░░██║░░░██║██╔██╗██║██║░░╚═╝░░░██║░░░██║██║░░██║██╔██╗██║╚█████╗░░░░╚██╗░██╔╝█████╗░░██████╔╝╚█████╗░█████╗░░
██╔══╝░░██║░░░██║██║╚████║██║░░██╗░░░██║░░░██║██║░░██║██║╚████║░╚═══██╗░░░░╚████╔╝░██╔══╝░░██╔══██╗░╚═══██╗██╔══╝░░
██║░░░░░╚██████╔╝██║░╚███║╚█████╔╝░░░██║░░░██║╚█████╔╝██║░╚███║██████╔╝██╗░░╚██╔╝░░███████╗██║░░██║██████╔╝███████╗
╚═╝░░░░░░╚═════╝░╚═╝░░╚══╝░╚════╝░░░░╚═╝░░░╚═╝░╚════╝░╚═╝░░╚══╝╚═════╝░╚═╝░░░╚═╝░░░╚══════╝╚═╝░░╚═╝╚═════╝░╚══════╝
@tsarry
#>

#Change this to true to enable the global superlog system
#The global superlog system will print all superlogs to the console
#Super logs are for almost everything so this will clutter the console
#This is useful for mass debugging purposes otherwise keep it off
UseGlobalSuperLog: logic = false

GlobalSuperlog<public>(I:string)<transacts>:void=
    if:
        UseGlobalSuperLog? or UsingDebug[GetSession()]?
    then: 
        Print("{I}")

CreateID<public>(Length:int)<decides><transacts>:string={
        Coords:string=("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
        ID := for:
            I := 0..Length
            R:=GetRandomInt(0,35)
        do{Coords[R]}; ID   
}
GlobalizedDetailing(P:purchaseable, Name:string):void=
    Print("\n == {Name} == \n {P.Name} | {P.ID}, \n Description: {P.Description}, \n Price: {P.Price}, \n CurrencyToSpendID: {P.CurrencyToSpendID}, \n CurrencyToReceiveID: {P.CurrencyToReceiveID}, \n GrantAmount: {P.GrantAmount},")
#Shows a localized message to the player using the HUD message device 
(HM:hud_message_device).StringShow<public>(Message:string, Agent:agent):void={HM.SetText(S2M(Message)); HM.Show(Agent)}

#Localizes a string to the player's language by converting the string to a message
S2M<localizes><public>(s:string)<computes>:message="{s}"

#Grant money to a player
GrantMoney<public>(Base:base, Player:player, GrantID:int, Amount:int, Bypass:logic):void=
    
        #If the player is found in the base's player list
        if:
            Base.Players.Find[Player]
            Rebirths := GetCoreStats[Player, Base.Base_Setup.PersistenceCore].Rebirths
            CurrentValue := GetCoreStats[Player, Base.Base_Setup.PersistenceCore].AssociatedCurrencies[GrantID]
            #Example with a rebirth multiplier of 1.5 and 100 as the base amount
            #((1.5^0) * 100) = 100
            #((1.5^1) * 100) = 150
            #((1.5^2) * 100) = 225
            #((1.5^3) * 100) = 337.5
            AmountToGrant := GetRebirthAmount[Base, Rebirths, Amount]
        then:
            Base.MoneyGranted.Signal(Player, GrantID, Amount)
            if:
                Bypass? or not HasZone[Base, GrantID]
            then:
                UpdateAssociatedCurrencies(Player, GrantID, AmountToGrant+CurrentValue, Base.Base_Setup.PersistenceCore)
            else if:
                    Currency := GetCurrencyConfig[Base, GrantID]
            then:
                    Currency.AddAwaitableCash(AmountToGrant)

BypassedGrantMoney<public>(Base:base, Player:player, GrantID:int, Amount:int):void=
    
    #If the player is found in the base's player list
    if:
        Base.Players.Find[Player]
        Rebirths := GetCoreStats[Player, Base.Base_Setup.PersistenceCore].Rebirths
        CurrentValue := GetCoreStats[Player, Base.Base_Setup.PersistenceCore].AssociatedCurrencies[GrantID]
        #Example with a rebirth multiplier of 1.5 and 100 as the base amount
        #((1.5^0) * 100) = 100
        #((1.5^1) * 100) = 150
        #((1.5^2) * 100) = 225
        #((1.5^3) * 100) = 337.5
        AmountToGrant := GetRebirthAmount[Base, Rebirths, Amount]
    then:
        UpdateAssociatedCurrencies(Player, GrantID, AmountToGrant+CurrentValue, Base.Base_Setup.PersistenceCore)
        Base.MoneyGranted.Signal(Player, GrantID, Amount)

        


RemoveMoney<public>(Base:base, Player:player, GrantID:int, Amount:int)<transacts>:void=
    if:
        Base.Players.Find[Player]
        CurrentValue := GetCoreStats[Player, Base.Base_Setup.PersistenceCore].AssociatedCurrencies[GrantID]
    then:
        #If the currency does not have the zone, then update the associated currencies instantly
            UpdateAssociatedCurrencies(Player, GrantID, CurrentValue-Amount, Base.Base_Setup.PersistenceCore)

        


GetRebirthAmount<public>(Base:base, Rebirths:int, Amount:int)<decides><transacts>:int=
    return Round[(Pow(Base.Base_Setup.RebirthConfig.RebirthCashMultiplier, Rebirths*1.0) * Amount)]

GetRebirthCostAmount<public>(Base:base, Rebirths:int)<decides><transacts>:int=
    return Round[(Pow(Base.Base_Setup.RebirthConfig.RebirthCostMultiplier, Rebirths*1.0) * Base.Base_Setup.RebirthConfig.RebirthCost)]

GrantXP<public>(Base:base, Player:player, Amount:int)<transacts>:void={}
    
condition<public>:=struct<concrete>():
    @editable MinCurrencyAmount <public>: int = 0
    @editable MinPlayerExperience <public>: int = 0
    @editable MinRebirths <public> : int = 0

GetConveyorConfig<public>(Base:base, ID:int)<decides><transacts>:custom_conveyor=
    {
        Prim := for:
            I -> C:Base.Conveyors
            I = ID
        do:
            C
        Prim[0].ConveyorConfig
    }
#Returns the currency config of a bases currency ID
GetCurrencyConfig(Base:base, CurrencyID:int)<decides><transacts>:currency_config=
    {
        Prim := for:
            I -> C:Base.Currencies
            I = CurrencyID
        do:
            C
        Prim[0]
    }

MeetsConditions<public>(Base:base, Condition:condition, Player:player, CurrencyID:int)<decides><transacts>:void=
        Stats := GetCoreStats[Player, Base.Base_Setup.PersistenceCore]
        Money := Stats.AssociatedCurrencies[CurrencyID]
        Experience := Stats.Experience
        Rebirths := Stats.Rebirths

        Money >= Condition.MinCurrencyAmount
        Experience >= Condition.MinPlayerExperience
        Rebirths >= Condition.MinRebirths
        return
        
CanBuy<public>(Base:base, Player:player, SP:purchaseable)<decides><transacts>:void=
    Stats := GetCoreStats[Player, Base.Base_Setup.PersistenceCore]
    Money := Stats.AssociatedCurrencies[SP.CurrencyToSpendID]
    Cost := SP.Price


    Money >= Cost
    return

#Returns the currency ID of a base specific currency config
GetCurrencyID<public>(Base:base, Currency:currency_config)<decides><transacts>:int=
    {
        Prim := for:
            I -> C:Base.Currencies
            C = Currency
        do:
            I
        Prim[0]
    }


#Checks if a currency has a zone
HasZone(Base:base, ID:int)<decides><transacts>:void=
    {
        Currency := GetCurrencyConfig[Base, ID]
        Currency.MaybeCollectionZone?
        return
        
    }

Load<public>(B:base, Purchaseable:PurchaseableType, I:int):void=
        if:
            Player := B.Players[0]
            PurchaseableData := FetchPurchaseableFromPtypeDex[Purchaseable, B, I]
        then:
            PurchaseableData(0).Load(Player)


(Item:purchaseable).Load(Player:player):void={Item.OnBought(Player)}

(Player:player).PurchaseBase<public>(FreeBase:base):void=
        FreeBase.OnBought(Player), 
        Print("BaseName: {FreeBase.Base_Setup.Name}")
        FreeBase.Base_Setup.PurchaseableConfigs.Purchase_Zone.PlayerEntersEvent.Signal(Player);
        spawn{FreeBase.Base_Setup.PurchaseableConfigs.Purchase_Zone.RetryPlayerEntersEvent(Player)}
        

PreventInf<public>()<suspends>:void=
    Sleep(0.0); return
    
(value:int).GetTrunc<public>(Base:base)<transacts>:string=

    metricprefixes := array{"", "K", "M", "B", "T", "Q", "Qu", "s", "S", "O", "N", "D"}

    if:
        Trunc := Base.Base_Setup.DecimalTruncation?
    then:
       #Base.Owner.Config.Superlog("Input is {value}")
        for:
            I -> P:metricprefixes
        do:
            if:
                max := Pow(1000.0, ITF(I+1))
                min := Pow(1000.0, ITF(I))
                curdex := metricprefixes[I]
                #Base.Owner.Config.Superlog("max {max} min {min} curdex {curdex}")
                ITF(value) < max
            then:
                #Base.Owner.Config.Superlog("Pre-Decimal Trunc is: {ITF(value)/min}{curdex}")
                return "{DecimalTrunc(ITF(value)/min, Trunc)}{curdex}"
            else:
                #Base.Owner.Config.Superlog("Too small")
    else:
        return "{value}"
    
    return "ERROR CODE TRU001"

ITF(value:int)<transacts>:float=value*1.0

DecimalTrunc(value:float, decimals:int)<transacts>:string=

    if:
        StrValue := "{value}"
        Index := StrValue.Find["."[0]]
        ValueSliced := StrValue.Slice[0, Index+1+decimals]
        ValueMinimum := StrValue.Slice[0, Index]
        DecimalEnding := StrValue.Slice[Index, StrValue.Length]
    then:
        if:
            not DecimalEnding[1] = "0"[0] and not decimals = 0
        then:
            return "{ValueSliced}"
        else:
            return "{ValueMinimum}"
            
    return "ERROR CODE TRU002"



# > > > > > Interface methods



GetStringParmaters<public>(MaybeP:?player, S:string, ParamList:StringReturnables)<transacts><decides>:string=
        var CurrentString : string = S
        var CurrentParams : [string]string = map{}
        if:
            P := MaybeP?
        then:
            GlobalSuperlog("Had Player")
            MyParams := ParamList.GetStringParams(option{P})
            set CurrentParams = MyParams
        else:
            set CurrentParams = ParamList.GetStringParams(false)
        S.Length >= 1
        loop:
            if:
                Sdex := CurrentString.Find["["[0]]
                Edex := CurrentString.Find["]"[0]]
                Value := CurrentString.Slice[Sdex, Edex+1]
            then:
                if:
                    FoundValue := CurrentParams[Value]
                    RemovedDex := CurrentString.Remove[Sdex, Edex+1]
                    FinalString := RemovedDex.Insert[Sdex, FoundValue]
                then:
                    set CurrentString = FinalString
                else if:
                    RemovedDex := CurrentString.Remove[Sdex, Edex+1]
                    set CurrentString = RemovedDex
                else:
                    break
            else:
                break
        
        return CurrentString


GroupedInitialize<public>(Base:base, Input:[][]SuperInaugurable):void=
    for:
        I -> E:Input
    do:
        for:
            J -> F:E
        do:
            F.Initialize(Base, J)
    return


Parent<public>(Type:[]purchaseable):[]SuperInaugurable=
    for:
        E:Type
    do:
        E.PoorsMansInit()

MergeStringMaps<public>(Map1:[string]string, Map2:[string]string)<transacts>:[string]string=
    var ReturnMap : [string]string = map{}
    for:
        Key -> Value:Map1
    do{if. set ReturnMap[Key] = Value}

    for:
        Key -> Value:Map2
    do{if. set ReturnMap[Key] = Value}

        

    ReturnMap
(InaugurableList:[][]t where t:subtype(SuperInaugurable)).InitList<public>(Base:base):void={
    for:
        InaugurableSet : InaugurableList
    do:
        for:
            IX -> InagurableItem : InaugurableSet
        do:
            InagurableItem.Initialize(Base, IX)
            
}


(RebirthableList:[][]t where t:subtype(Rebirthable)).RebirthList<public>(Base:base):void={
    for:
        RebirthSet : RebirthableList
    do:
        for:
            IX -> RebirthAble : RebirthSet
        do:
            RebirthAble.OnRebirth()
            
}


#Make the unlock system simply a map, maped to the base_manager class 
FetchPurchaseableFromPtypeDex<public>(PropType:PurchaseableType, Base:base, idex:int)<transacts><decides>:tuple(purchaseable, string)={
    case(PropType):
        PurchaseableType.BasicProp => (Base.BasicProps[idex], "BasicProp")
        #PurchaseableType.Computer => (Base.BasicProps[idex], "BasicProp")
        PurchaseableType.Conveyor => (Base.Conveyors[idex], "Conveyors")
        PurchaseableType.DanceFloor => (Base.DanceFloors[idex], "DanceFloors")
        PurchaseableType.Dropper => (Base.Droppers[idex], "Droppers")
        PurchaseableType.NPCBuyable => (Base.NPCSpawners[idex], "NPCSpawners")
        PurchaseableType.Shootable => (Base.Shootables[idex], "Shootables")
        PurchaseableType.Hitable => (Base.Hitables[idex], "Hitables")
        PurchaseableType.Upgrader => (Base.Upgraders[idex], "Upgraders")
        PurchaseableType.Pet => (Base.Pets[idex], "Pets")
        



}
                        





ownable := interface{
    Assign<public>(Player:player)<transacts>:void
    Clear<public>():void
    IsOwned<public>()<transacts><decides>:void
    GetOwner<public>()<transacts><decides>:player
}

#finds open ownable | assigns to player passed in
(Ownables:[]t where t:subtype(ownable)).FindAssignOpen(Player:player)<transacts><decides>:t={
    UnOwned := for(Ownable:Ownables, not Ownable.IsOwned[]){Ownable}
    Out_Ownable := UnOwned[0]
    Out_Ownable.Assign(Player)
    return Out_Ownable
}

#fetches first open ownable
(Ownables:[]t where t:subtype(ownable)).FetchOpen()<transacts><decides>:t={
    UnOwned := for(Ownable:Ownables, not Ownable.IsOwned[]){Ownable}
    UnOwned[0]
}

#clears all owned ownables
(Ownables:[]t where t:subtype(ownable)).ClearAll():void={
    for(Ownable:Ownables, Ownable.IsOwned[]){Ownable.Clear()}
}